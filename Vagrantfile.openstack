# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'vagrant-openstack-provider'

BOX_NAME = ENV['VAGRANT_BOX_NAME'] || 'bento/centos-7.2'
OS_USERNAME = ENV['OS_USERNAME'] || 'admin'
OS_PASSWORD = ENV['OS_PASSWORD'] || 'PPPGee4soopohsusaki'
OS_TENANT_NAME = ENV['OS_TENANT_NAME'] || 'admin'

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = BOX_NAME
  config.ssh.username = 'centos'
  config.ssh.pty = true

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
  config.vm.network "forwarded_port", guest: 8080, host: 8080
  config.vm.network "forwarded_port", guest: 9000, host: 9000


  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
#  VAGRANT_ROOT = File.dirname(File.expand_path(__FILE__))
#  config.vm.provider "virtualbox" do |vb|
#    file_to_disk = File.join(VAGRANT_ROOT, '.vagrant/lvm_containersi.vdi')
#    unless File.exist?(file_to_disk)
#      vb.customize ['createhd', '--filename', file_to_disk, '--size', 100 * 1024]
#    end
#    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', file_to_disk]
    # Customize the amount of memory on the VM:
#    vb.memory = "3072"
#  end
  config.vm.provider :openstack do |os|
    os.server_name        = 'aio-' + ENV['USER']
    VOLLXC                = ENV['USER'] + '-lxc'
    VOLCINDER             = ENV['USER'] + '-cinder'
    os.openstack_auth_url = 'http://192.168.10.7:5000/v2.0/tokens'
    os.username           = OS_USERNAME
    os.password           = OS_PASSWORD
    os.tenant_name        = OS_TENANT_NAME
    os.flavor             = 'm1.medium'
    os.image              = 'centos7'
    os.floating_ip_pool   = 'ext-net'
    os.networks = [
        { name: 'demo-net' }
    ]
    os.volumes = [
        {
          name: VOLLXC,
          device: '/dev/vdb'
        },
        {
          name: VOLCINDER,
          device: '/dev/vdc'
        }
    ]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    sudo yum install -y http://repo.cloudlinux.com/stackforce-testing/x86_64/ansible-2.0.0.2-1.el7.noarch.rpm
    sudo yum -y install lvm2 
    sudo -u centos ansible-playbook -i "localhost," -c local --extra-vars 'lxc_container_user_name=centos lxc_disk=/dev/vdb inventory_filepath=/vagrant/test/inventory/vagrant.openstack' /vagrant/playbooks/create_lxc_containers.yml
    sudo -u centos ansible-playbook -i /vagrant/inventory/dynlxc.py --sudo /vagrant/playbooks/horizon_proxy.yml
    sudo -u centos ansible-playbook -i /vagrant/inventory/dynlxc.py --sudo /vagrant/playbooks/stackforce.yml
    sudo -u centos ansible-playbook -i "localhost," -c local /vagrant/test/playbooks/install_bats.yml
    #sudo -u centos bats /vagrant/test/integration/default/bats/*.bats
  SHELL
end

