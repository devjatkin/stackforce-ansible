#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats
    tune.ssl.default-dh-param 2048
    {% if self_signed_cert == "true" %}
    ca-base /etc/haproxy/haproxy_cert
    crt-base /etc/haproxy/haproxy_cert
    {% endif %}

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# stats
#---------------------------------------------------------------------

listen stats *:9000       #Listen on all IP's on port 9000
    mode http
    balance
    timeout client 5000
    timeout connect 4000
    timeout server 30000

    #This is the virtual URL to access the stats page
    stats uri /haproxy_stats

    #Authentication realm. This can be set to anything. Escape space characters with a backslash.
    stats realm HAProxy\ Statistics

    #The user/pass you want to use. Change this password!
    stats auth {{ haproxy_stats_user }}:{{ haproxy_stats_password }}

    #This allows you to take down and bring up back end servers.
    #This will produce an error on older versions of HAProxy.
    stats admin if TRUE

#---------------------------------------------------------------------
# keystone
#---------------------------------------------------------------------
listen keystone_admin 0.0.0.0:35357
        balance source
        option tcpka
        option httpchk
        maxconn 10000
{% for host in groups['keystone'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:35357 check inter 2000 rise 2 fall 5
{% endfor %}

listen keystone_api 0.0.0.0:5000
        balance source
        option tcpka
        option httpchk
        maxconn 10000
{% for host in groups['keystone'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:5000 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# glance
#---------------------------------------------------------------------
listen glance_api 0.0.0.0:9292
        balance source
        option tcpka
        option httpchk
        maxconn 10000
{% for host in groups['glance'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:9292 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# glance-registry
#---------------------------------------------------------------------
listen glance_api 0.0.0.0:9191
        balance source
        option tcpka
        option tcplog 
        maxconn 10000
{% for host in groups['glance'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:9191 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# nova
#---------------------------------------------------------------------
listen nova_api 0.0.0.0:8774
        balance source
        option tcpka
        option httpchk
        maxconn 10000
{% for host in groups['nova'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:8774 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# nova-metadata
#---------------------------------------------------------------------
listen nova_metadata 0.0.0.0:8775
        balance source
        option tcpka
        option httpchk
        maxconn 10000
{% for host in groups['nova'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:8775 check inter 2000 rise 2 fall 5
{% endfor %}


#---------------------------------------------------------------------
# nova-novncproxy
#---------------------------------------------------------------------
listen nova_novncproxy 0.0.0.0:6080
        balance source
        option tcpka
        maxconn 10000
{% for host in groups['nova'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:6080 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# cinder
#---------------------------------------------------------------------
listen cinder_api 0.0.0.0:8776
        balance source
        option tcpka
        option httpchk
        maxconn 10000
{% for host in groups['cinder'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:8776 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# horizon
#---------------------------------------------------------------------
frontend horizon_public
  bind :80
  {% if self_signed_cert == "true" %}
  bind :443 ssl crt server.pem
    redirect scheme https if !{ ssl_fc }
    mode http
    default_backend nodes
  {% endif %}
  default_backend horizon


backend horizon
        balance source
        option tcpka
        option httpchk
{% for host in groups['horizon'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:80 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# rabbitmq
#---------------------------------------------------------------------
listen rabbitmq 0.0.0.0:5672
        balance source
        mode tcp
        option tcpka
        maxconn 10000
{% for host in groups['rabbitmq'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:5672 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# rabbitmq_management
#---------------------------------------------------------------------
listen rabbitmq 0.0.0.0:7600
        balance source
        mode tcp
        option tcpka
        maxconn 10000
{% for host in groups['rabbitmq'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:15672 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# graphite
#---------------------------------------------------------------------
listen graphite 0.0.0.0:7500
        balance source
        mode tcp
        option tcpka
        maxconn 10000
{% for host in groups['graphite'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:80 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# grafana
#---------------------------------------------------------------------
listen graphite 0.0.0.0:7400
        balance source
        mode tcp
        option tcpka
        maxconn 10000
{% for host in groups['graphite'] %}
        server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:3000 check inter 2000 rise 2 fall 5
{% endfor %}

#---------------------------------------------------------------------
# mysql
#---------------------------------------------------------------------
listen mysql-cluster 0.0.0.0:3306
    mode tcp
    option tcpka
    option httpchk
{% for host in groups['mariadb'] %}
    server {{ host }} {{ hostvars[host].get('ansible_host', hostvars[host]['ansible_host']) }}:3306 port 9200 inter 12000 rise 3 fall 3 check
{% endfor %}
#---------------------------------------------------------------------
# consul
#---------------------------------------------------------------------
listen consul-ui {{ ansible_default_ipv4.address }}:8500
    mode tcp
    option tcpka
    option httpchk
    server localhost 127.0.0.1 port 8500 inter 2000 rise 3 fall 3 check
