---
- hosts: controller*
  become: yes
  become_method: sudo
  vars:
    username: "buildbot"
    inventory: "tst_two"
    containers: "files/tst_two.yml"
    inventory_filepath: "/etc/stackforce/inventory"
    unique_containers_file: "/etc/stackforce/containers.yml"
    public_address: "{{ ansible_default_ipv4.address }}"
  tasks:
    - name: add user
      user: name="{{ username }}" shell=/bin/bash groups=wheel
    - name: sudoers
      command: sed --in-place 's/^#\s*\(%wheel\s\+ALL=(ALL)\s\+NOPASSWD:\s\+ALL\)/\1/' /etc/sudoers
    - authorized_key:
        user: "{{ username }}"
        key:  "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    - name: Custom ssh config
      become_user: "{{ username }}"
      copy: src="files/dot_ssh/config" dest="~/.ssh/config" mode=600 owner="{{ username }}"
    - name: private ssh key
      copy:
        src: "~/.ssh/id_rsa"
        dest: "/home/{{ username }}/.ssh/id_rsa"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "600"
    - name: public ssh key
      copy:
        src: "~/.ssh/id_rsa.pub"
        dest: "/home/{{ username }}/.ssh/id_rsa.pub"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "644"
    - name: Install repos
      yum: name="{{ item }}" state=present
      with_items:
        - epel-release
        - http://repo.cloudlinux.com/stackforce/x86_64/stackforce-release-1-1.el7.noarch.rpm
    - name: Upgrade all packages
      yum: name=* state=latest
    - name: Install necessary packages
      yum:
        name: "{{ item }}"
        state: installed
        enablerepo: stackforce-testing
      with_items:
        - python2-lxc
        - ansible
        - git
        - python-devel
        - gcc
        - python-pip
        - lvm2
        - yajl
    - name: Install python requirements
      pip: name="{{ item }}"
      with_items:
        - python-consul

    - name: Wipe remote directory
      file:
        path: "/home/{{ username }}/stackforce-ansible"
        state: absent
    - name: Create empty directory
      file:
        path: "/home/{{ username }}/stackforce-ansible"
        state: directory
        owner: "{{ username }}"
    - name: Copy source code
      synchronize:
        src: "{{ lookup('env','PWD') }}/"
        dest: "/home/{{ username }}/stackforce-ansible"
        recursive: yes
        rsync_opts: "--exclude='.git/' --exclude='.venv/' --exclude='.tox/'"
      become: no
    - name: Update mode for dynlxc.py
      file:
        path: "/home/{{username}}/stackforce-ansible/inventory/dynlxc.py"
        state: file
        mode: "755"

    - name: Create config dir
      file: path=/etc/stackforce state=directory
    - name: Set parameters.ini
      template: src=parameters.ini.j2 dest=/etc/stackforce/parameters.ini
    - name: Set containers.yml
      copy: src={{ containers }} dest=/etc/stackforce/containers.yml
      tags:
        - config
    - name: Copy base inventory
      copy: src={{ inventory }} dest=/etc/stackforce/inventory
      tags:
        - config
- hosts: all
  become: yes
  become_method: sudo
  vars:
    num_controllers:  "{{ groups['controller'] | length }}"
    self_signed_cert: "true"
    horizon_ssl_self_signed_subject: "/C=UA/ST=Kiev/L=Kiev/O=IT"
    mgnt_phys_dev: "eth0"
  tasks:
    - name: Install requirements
      yum: name="{{ item }}" state=present
      with_items:
        - bridge-utils
        - dnsmasq

    - name: copy interface Vlan10 config
      template: src=ifcfg-eth0.10.j2 dest=/etc/sysconfig/network-scripts/ifcfg-eth0.10

    - name: copy interface mngt-br config
      template: src=ifcfg-mngt-br.j2 dest=/etc/sysconfig/network-scripts/ifcfg-mngt-br

    - name: Copy DNSmasq config
      copy:
        src: "files/dnsmasq.conf"
        dest: "/etc/dnsmasq.conf"
      when: ( inventory_hostname ==  "{{ groups['controller'][0] }}" )

    - name: Restart networking
      service: name=network state=restarted
      when: ( inventory_hostname ==  "{{ groups['controller'][0] }}" )
    - name: Start dnsmasq
      service: name=dnsmasq state=restarted
      when: ( inventory_hostname ==  "{{ groups['controller'][0] }}" )

    - name: Restart networking
      service: name=network state=restarted
      when: ( inventory_hostname !=  "{{ groups['controller'][0] }}" and num_controllers | int > 1)
    - name: Add local DNSservers
      lineinfile: dest=/etc/resolv.conf insertbefore=BOF line="nameserver 192.168.53.254"
